version: '3'
services:
  mysql:
    image: mysql:8.0
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_USER=application
      - MYSQL_PASSWORD=application
      - MYSQL_DATABASE=loopers
      - MYSQL_CHARACTER_SET=utf8mb4
      - MYSQL_COLLATE=utf8mb4_general_ci
    volumes:
      - mysql-8-data:/var/lib/mysql

  redis-master:
    image: redis:7.0
    container_name: redis-master
    ports:
      - "6379:6379"
    volumes:
      - redis_master_data:/data
    command:
      [
        "redis-server", # redis 서버 실행 명령어
        "--appendonly", "yes", # AOF (AppendOnlyFile) 영속성 기능 켜기
        "--save", "",
        "--latency-monitor-threshold", "100", # 특정 command 가 지정 시간(ms) 이상 걸리면 monitor 기록
      ]
    healthcheck:
      test: [ "CMD", "redis-cli", "-p", "6379", "PING" ]
      interval: 5s
      timeout: 2s
      retries: 10

  redis-readonly:
    image: redis:7.0
    container_name: redis-readonly
    depends_on:
      redis-master:
        condition: service_healthy
    ports:
      - "6380:6379"
    volumes:
      - redis_readonly_data:/data
    command:
      [
        "redis-server",
        "--appendonly", "yes",
        "--appendfsync", "everysec",
        "--replicaof", "redis-master", "6379", # replica 모드로 실행 + 서비스 명, 서비스 포트
        "--replica-read-only", "yes", # 읽기 전용으로 설정
        "--latency-monitor-threshold", "100",
      ]
    healthcheck:
      test: [ "CMD", "redis-cli", "-p", "6380", "PING" ]
      interval: 5s
      timeout: 2s
      retries: 10

  kafka:
    image: bitnami/kafka:3.5.1
    container_name: kafka
    ports:
      - "19092:19092" # 호스트 리스너 얘 떄문인가
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=1 # 브로커 ID 설정
      - KAFKA_CFG_PROCESS_ROLES=broker,controller # 브로커와 컨트롤러 역할 설정
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092, PLAINTEXT_HOST://:19092, CONTROLLER://:9093 # 리스너 설정
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092, PLAINTEXT_HOST://localhost:19092 # 외부 접속용 어드버타이즈드 리스너 설정
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT # 리스너별 프로토콜 맵핑 설정
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT # 브로커 간 통신용 리스너 이름 설정
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER # 컨트롤러 담당 리스너 이름 설정
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093 # 컨트롤러 후보 노드 정의
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1 # consumer offsets 토픽 복제 팩터 설정 (로컬이라 1)
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1 # 트랜잭션 상태 로그 복제 팩터 설정 (로컬이라 1)
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1 #
    volumes:
      - kafka-data:/bitnami/kafka
    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8090:8080"
    environment:
        - KAFKA_CLUSTERS_0_NAME=local
        - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092 # 카프카 브로커 주소
        - KAFKA_CLUSTERS_0_ZOOKEEPER=
    depends_on:
      - kafka

volumes:
  mysql-8-data:
  redis_master_data:
  redis_readonly_data:
  kafka-data:


networks:
  default:
    driver: bridge
